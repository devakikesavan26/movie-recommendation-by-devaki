# -*- coding: utf-8 -*-
"""Another copy of Untitled7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ogUYuj-HdqMNfZgJ8zzOpArIDyHR9tzt
"""

import pandas as pd
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.feature_extraction.text import CountVectorizer

# Load ratings data
ratings = pd.read_csv("custom_ratings.csv")

# Create user-item matrix (rows = users, columns = movie titles)
user_movie_matrix = ratings.pivot_table(index='userId', columns='title', values='rating').fillna(0)

# Compute cosine similarity between users
user_similarity = cosine_similarity(user_movie_matrix)
user_similarity_df = pd.DataFrame(user_similarity, index=user_movie_matrix.index, columns=user_movie_matrix.index)

# Function to recommend movies to a user
def recommend_movies_for_user(user_id, num_recommendations=5):
    if user_id not in user_movie_matrix.index:
        return ["User not found."]

    # Get similarity scores for this user
    similar_users = user_similarity_df[user_id].sort_values(ascending=False)[1:]

    # Weighted average of ratings from similar users
    weighted_ratings = pd.Series()
    for other_user, sim_score in similar_users.items():
        other_user_ratings = user_movie_matrix.loc[other_user]
        weighted_ratings = weighted_ratings.add(other_user_ratings * sim_score, fill_value=0)

    # Remove already rated movies
    rated_movies = user_movie_matrix.loc[user_id]
    unrated_movies = rated_movies[rated_movies == 0].index
    weighted_ratings = weighted_ratings[unrated_movies]

    # Return top N recommendations
    recommendations = weighted_ratings.sort_values(ascending=False).head(num_recommendations)
    return recommendations.index.tolist()

# Example: Get recommendations for userId 3
recommended = recommend_movies_for_user(3)
print("Recommended movies for user 3:")
for movie in recommended:
    print("-", movie)

import pandas as pd
from sklearn.metrics.pairwise import cosine_similarity

# Load ratings data
ratings = pd.read_csv("custom_ratings.csv")

# Create user-movie matrix
user_movie_matrix = ratings.pivot_table(index='userId', columns='title', values='rating').fillna(0)

# Compute cosine similarity between users
user_similarity = cosine_similarity(user_movie_matrix)
user_similarity_df = pd.DataFrame(user_similarity, index=user_movie_matrix.index, columns=user_movie_matrix.index)

# Recommendation function
def recommend_movies(user_id, num_recommendations=5):
    if user_id not in user_movie_matrix.index:
        return ["User not found."]

    similar_users = user_similarity_df[user_id].sort_values(ascending=False)[1:]

    weighted_ratings = pd.Series(dtype=float)
    for other_user, sim_score in similar_users.items():
        other_user_ratings = user_movie_matrix.loc[other_user]
        weighted_ratings = weighted_ratings.add(other_user_ratings * sim_score, fill_value=0)

    rated_movies = user_movie_matrix.loc[user_id]
    unrated = rated_movies[rated_movies == 0].index
    weighted_ratings = weighted_ratings[unrated]

    recommendations = weighted_ratings.sort_values(ascending=False).head(num_recommendations)
    return recommendations.index.tolist()

# Ask for user input
user_input = int(input("Enter User ID (1-20): "))
result = recommend_movies(user_input)

# Display result
print(f"\nRecommended Movies for User {user_input}:")
for movie in result:
    print("-", movie)

import pandas as pd
from sklearn.metrics.pairwise import cosine_similarity
import seaborn as sns
import matplotlib.pyplot as plt

# Load data
ratings = pd.read_csv("custom_ratings.csv")

# User-movie matrix
user_movie_matrix = ratings.pivot_table(index='userId', columns='title', values='rating').fillna(0)

# Cosine similarity
user_similarity = cosine_similarity(user_movie_matrix)
user_similarity_df = pd.DataFrame(user_similarity, index=user_movie_matrix.index, columns=user_movie_matrix.index)

# Heatmap of similarity
plt.figure(figsize=(10, 8))
sns.heatmap(user_similarity_df, cmap="YlGnBu")
plt.title("User Similarity Matrix")
plt.show()
.



if recommendations[0] == "User not found.":
    print(recommendations[0])
else:
    scores = weighted_ratings[recommendations]

    plt.figure(figsize=(8, 5))
    sns.barplot(x=scores.values, y=scores.index)
    plt.xlabel("Weighted Rating Score")
    plt.title(f"Top 5 Movie Recommendations for User {user_input}")
    plt.show()import pandas as pd
from sklearn.metrics.pairwise import cosine_similarity
import seaborn as sns
import matplotlib.pyplot as plt

# Load data
ratings = pd.read_csv("custom_ratings.csv")

# User-movie matrix
user_movie_matrix = ratings.pivot_table(index='userId', columns='title', values='rating').fillna(0)

# Cosine similarity
user_similarity = cosine_similarity(user_movie_matrix)
user_similarity_df = pd.DataFrame(user_similarity, index=user_movie_matrix.index, columns=user_movie_matrix.index)


# Recommendation function
def recommend_movies(user_id, num_recommendations=5):
    if user_id not in user_movie_matrix.index:
        return ["User not found."], None # Return None for weighted_ratings in case of user not found

    similar_users = user_similarity_df[user_id].sort_values(ascending=False)[1:]

    weighted_ratings = pd.Series(dtype=float)
    for other_user, sim_score in similar_users.items():
        other_user_ratings = user_movie_matrix.loc[other_user]
        weighted_ratings = weighted_ratings.add(other_user_ratings * sim_score, fill_value=0)

    rated_movies = user_movie_matrix.loc[user_id]
    unrated = rated_movies[rated_movies == 0].index
    weighted_ratings = weighted_ratings[unrated]

    recommendations = weighted_ratings.sort_values(ascending=False).head(num_recommendations)
    return recommendations.index.tolist(), weighted_ratings # Return weighted_ratings

recommendations, weighted_ratings = recommend_movies(user_input, 5)  # Get both recommendations and weighted_ratings
# Handle the case where user is not found

sns.heatmap(user_similarity_df, cmap="YlGnBu")

print(recommend_movies(4))

sns.barplot(x=scores.values, y=scores.index)